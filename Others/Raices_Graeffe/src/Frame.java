
import java.util.ArrayList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 57315
 */
public class Frame extends javax.swing.JFrame {

    Raices r = new Raices();
    Gauss g = new Gauss();
    
    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        habilitarCampos = new javax.swing.JButton();
        calcular = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        solucion = new javax.swing.JTextArea();
        grado = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        n1 = new javax.swing.JTextField();
        n2 = new javax.swing.JTextField();
        n3 = new javax.swing.JTextField();
        n4 = new javax.swing.JTextField();
        n5 = new javax.swing.JTextField();
        n6 = new javax.swing.JTextField();
        n7 = new javax.swing.JTextField();
        n8 = new javax.swing.JTextField();
        n9 = new javax.swing.JTextField();
        n10 = new javax.swing.JTextField();
        fn8 = new javax.swing.JTextField();
        fn1 = new javax.swing.JTextField();
        fn9 = new javax.swing.JTextField();
        fn10 = new javax.swing.JTextField();
        fn2 = new javax.swing.JTextField();
        fn3 = new javax.swing.JTextField();
        fn4 = new javax.swing.JTextField();
        fn5 = new javax.swing.JTextField();
        fn6 = new javax.swing.JTextField();
        fn7 = new javax.swing.JTextField();
        c8 = new javax.swing.JTextField();
        c1 = new javax.swing.JTextField();
        c9 = new javax.swing.JTextField();
        c10 = new javax.swing.JTextField();
        c2 = new javax.swing.JTextField();
        c3 = new javax.swing.JTextField();
        c4 = new javax.swing.JTextField();
        c5 = new javax.swing.JTextField();
        c6 = new javax.swing.JTextField();
        c7 = new javax.swing.JTextField();
        c11 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Ingrese el grado de la ecuaci√≥n: ");

        habilitarCampos.setText("Habilitar Campos");
        habilitarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                habilitarCamposActionPerformed(evt);
            }
        });

        calcular.setText("Calcular");
        calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularActionPerformed(evt);
            }
        });

        solucion.setColumns(20);
        solucion.setRows(5);
        jScrollPane1.setViewportView(solucion);

        jLabel2.setText("Si n es:");

        jLabel3.setText("Valor fn");

        jLabel4.setText("Coeficientes");

        n1.setEnabled(false);

        n2.setEnabled(false);

        n3.setEnabled(false);

        n4.setEnabled(false);

        n5.setEnabled(false);

        n6.setEnabled(false);

        n7.setEnabled(false);

        n8.setEnabled(false);

        n9.setEnabled(false);

        n10.setEnabled(false);

        fn8.setEnabled(false);

        fn1.setEnabled(false);

        fn9.setEnabled(false);

        fn10.setEnabled(false);

        fn2.setEnabled(false);

        fn3.setEnabled(false);

        fn4.setEnabled(false);

        fn5.setEnabled(false);

        fn6.setEnabled(false);

        fn7.setEnabled(false);

        c8.setEnabled(false);

        c1.setEnabled(false);

        c9.setEnabled(false);

        c10.setEnabled(false);

        c2.setEnabled(false);

        c3.setEnabled(false);

        c4.setEnabled(false);

        c5.setEnabled(false);

        c6.setEnabled(false);

        c7.setEnabled(false);

        c11.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(33, 33, 33)
                        .addComponent(grado, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(calcular, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(habilitarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(n5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(n1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(n2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(n3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(n4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(n10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(n6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(n7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(n8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(n9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(fn5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fn1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fn2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fn3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fn4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fn10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fn6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fn7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fn8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fn9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(c5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(120, 120, 120))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(grado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(habilitarCampos)
                        .addGap(34, 34, 34)
                        .addComponent(calcular)
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(n1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(n2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(n3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(n4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(n5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(n6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(n7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(n8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(n9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(n10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fn2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fn3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fn4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fn5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fn6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fn7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fn8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fn9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fn10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(c1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void habilitarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_habilitarCamposActionPerformed
        switch(Integer.parseInt(grado.getText())){
            case 1:
            n1.setEnabled(true);
            n1.setEditable(true);

            fn1.setEnabled(true);
            fn1.setEditable(true);

            c1.setEnabled(true);
            c1.setEditable(true);

            c2.setEnabled(true);
            c2.setEditable(true);
            break;
            case 2:
            n1.setEnabled(true);
            n1.setEditable(true);

            fn1.setEnabled(true);
            fn1.setEditable(true);

            c1.setEnabled(true);
            c1.setEditable(true);

            n2.setEnabled(true);
            n2.setEditable(true);

            fn2.setEnabled(true);
            fn2.setEditable(true);

            c2.setEnabled(true);
            c2.setEditable(true);

            c3.setEnabled(true);
            c3.setEditable(true);
            break;
            case 3:
            n1.setEnabled(true);
            n1.setEditable(true);

            fn1.setEnabled(true);
            fn1.setEditable(true);

            c1.setEnabled(true);
            c1.setEditable(true);

            n2.setEnabled(true);
            n2.setEditable(true);

            fn2.setEnabled(true);
            fn2.setEditable(true);

            c2.setEnabled(true);
            c2.setEditable(true);

            n3.setEnabled(true);
            n3.setEditable(true);

            fn3.setEnabled(true);
            fn3.setEditable(true);

            c3.setEnabled(true);
            c3.setEditable(true);

            c4.setEnabled(true);
            c4.setEditable(true);
            break;
            case 4:
            n1.setEnabled(true);
            n1.setEditable(true);

            fn1.setEnabled(true);
            fn1.setEditable(true);

            c1.setEnabled(true);
            c1.setEditable(true);

            n2.setEnabled(true);
            n2.setEditable(true);

            fn2.setEnabled(true);
            fn2.setEditable(true);

            c2.setEnabled(true);
            c2.setEditable(true);

            n3.setEnabled(true);
            n3.setEditable(true);

            fn3.setEnabled(true);
            fn3.setEditable(true);

            c3.setEnabled(true);
            c3.setEditable(true);

            n4.setEnabled(true);
            n4.setEditable(true);

            fn4.setEnabled(true);
            fn4.setEditable(true);

            c4.setEnabled(true);
            c4.setEditable(true);

            c5.setEnabled(true);
            c5.setEditable(true);
            break;
            case 5:
            n1.setEnabled(true);
            n1.setEditable(true);

            fn1.setEnabled(true);
            fn1.setEditable(true);

            c1.setEnabled(true);
            c1.setEditable(true);

            n2.setEnabled(true);
            n2.setEditable(true);

            fn2.setEnabled(true);
            fn2.setEditable(true);

            c2.setEnabled(true);
            c2.setEditable(true);

            n3.setEnabled(true);
            n3.setEditable(true);

            fn3.setEnabled(true);
            fn3.setEditable(true);

            c3.setEnabled(true);
            c3.setEditable(true);

            n4.setEnabled(true);
            n4.setEditable(true);

            fn4.setEnabled(true);
            fn4.setEditable(true);

            c4.setEnabled(true);
            c4.setEditable(true);

            n5.setEnabled(true);
            n5.setEditable(true);

            fn5.setEnabled(true);
            fn5.setEditable(true);

            c5.setEnabled(true);
            c5.setEditable(true);

            c6.setEnabled(true);
            c6.setEditable(true);
            break;
            case 6:
            n1.setEnabled(true);
            n1.setEditable(true);

            fn1.setEnabled(true);
            fn1.setEditable(true);

            c1.setEnabled(true);
            c1.setEditable(true);

            n2.setEnabled(true);
            n2.setEditable(true);

            fn2.setEnabled(true);
            fn2.setEditable(true);

            c2.setEnabled(true);
            c2.setEditable(true);

            n3.setEnabled(true);
            n3.setEditable(true);

            fn3.setEnabled(true);
            fn3.setEditable(true);

            c3.setEnabled(true);
            c3.setEditable(true);

            n4.setEnabled(true);
            n4.setEditable(true);

            fn4.setEnabled(true);
            fn4.setEditable(true);

            c4.setEnabled(true);
            c4.setEditable(true);

            n5.setEnabled(true);
            n5.setEditable(true);

            fn5.setEnabled(true);
            fn5.setEditable(true);

            c5.setEnabled(true);
            c5.setEditable(true);

            n6.setEnabled(true);
            n6.setEditable(true);

            fn6.setEnabled(true);
            fn6.setEditable(true);

            c6.setEnabled(true);
            c6.setEditable(true);

            c7.setEnabled(true);
            c7.setEditable(true);
            break;
            case 7:
            n1.setEnabled(true);
            n1.setEditable(true);

            fn1.setEnabled(true);
            fn1.setEditable(true);

            c1.setEnabled(true);
            c1.setEditable(true);

            n2.setEnabled(true);
            n2.setEditable(true);

            fn2.setEnabled(true);
            fn2.setEditable(true);

            c2.setEnabled(true);
            c2.setEditable(true);

            n3.setEnabled(true);
            n3.setEditable(true);

            fn3.setEnabled(true);
            fn3.setEditable(true);

            c3.setEnabled(true);
            c3.setEditable(true);

            n4.setEnabled(true);
            n4.setEditable(true);

            fn4.setEnabled(true);
            fn4.setEditable(true);

            c4.setEnabled(true);
            c4.setEditable(true);

            n5.setEnabled(true);
            n5.setEditable(true);

            fn5.setEnabled(true);
            fn5.setEditable(true);

            c5.setEnabled(true);
            c5.setEditable(true);

            n6.setEnabled(true);
            n6.setEditable(true);

            fn6.setEnabled(true);
            fn6.setEditable(true);

            c6.setEnabled(true);
            c6.setEditable(true);

            n7.setEnabled(true);
            n7.setEditable(true);

            fn7.setEnabled(true);
            fn7.setEditable(true);

            c7.setEnabled(true);
            c7.setEditable(true);

            c8.setEnabled(true);
            c8.setEditable(true);
            break;
            case 8:
            n1.setEnabled(true);
            n1.setEditable(true);

            fn1.setEnabled(true);
            fn1.setEditable(true);

            c1.setEnabled(true);
            c1.setEditable(true);

            n2.setEnabled(true);
            n2.setEditable(true);

            fn2.setEnabled(true);
            fn2.setEditable(true);

            c2.setEnabled(true);
            c2.setEditable(true);

            n3.setEnabled(true);
            n3.setEditable(true);

            fn3.setEnabled(true);
            fn3.setEditable(true);

            c3.setEnabled(true);
            c3.setEditable(true);

            n4.setEnabled(true);
            n4.setEditable(true);

            fn4.setEnabled(true);
            fn4.setEditable(true);

            c4.setEnabled(true);
            c4.setEditable(true);

            n5.setEnabled(true);
            n5.setEditable(true);

            fn5.setEnabled(true);
            fn5.setEditable(true);

            c5.setEnabled(true);
            c5.setEditable(true);

            n6.setEnabled(true);
            n6.setEditable(true);

            fn6.setEnabled(true);
            fn6.setEditable(true);

            c6.setEnabled(true);
            c6.setEditable(true);

            n7.setEnabled(true);
            n7.setEditable(true);

            fn7.setEnabled(true);
            fn7.setEditable(true);

            c7.setEnabled(true);
            c7.setEditable(true);

            n8.setEnabled(true);
            n8.setEditable(true);

            fn8.setEnabled(true);
            fn8.setEditable(true);

            c8.setEnabled(true);
            c8.setEditable(true);

            c9.setEnabled(true);
            c9.setEditable(true);
            break;
            case 9:
            n1.setEnabled(true);
            n1.setEditable(true);

            fn1.setEnabled(true);
            fn1.setEditable(true);

            c1.setEnabled(true);
            c1.setEditable(true);

            n2.setEnabled(true);
            n2.setEditable(true);

            fn2.setEnabled(true);
            fn2.setEditable(true);

            c2.setEnabled(true);
            c2.setEditable(true);

            n3.setEnabled(true);
            n3.setEditable(true);

            fn3.setEnabled(true);
            fn3.setEditable(true);

            c3.setEnabled(true);
            c3.setEditable(true);

            n4.setEnabled(true);
            n4.setEditable(true);

            fn4.setEnabled(true);
            fn4.setEditable(true);

            c4.setEnabled(true);
            c4.setEditable(true);

            n5.setEnabled(true);
            n5.setEditable(true);

            fn5.setEnabled(true);
            fn5.setEditable(true);

            c5.setEnabled(true);
            c5.setEditable(true);

            n6.setEnabled(true);
            n6.setEditable(true);

            fn6.setEnabled(true);
            fn6.setEditable(true);

            c6.setEnabled(true);
            c6.setEditable(true);

            n7.setEnabled(true);
            n7.setEditable(true);

            fn7.setEnabled(true);
            fn7.setEditable(true);

            c7.setEnabled(true);
            c7.setEditable(true);

            n8.setEnabled(true);
            n8.setEditable(true);

            fn8.setEnabled(true);
            fn8.setEditable(true);

            c8.setEnabled(true);
            c8.setEditable(true);

            n9.setEnabled(true);
            n9.setEditable(true);

            fn9.setEnabled(true);
            fn9.setEditable(true);

            c9.setEnabled(true);
            c9.setEditable(true);

            c10.setEnabled(true);
            c10.setEditable(true);
            break;
            case 10:
            n1.setEnabled(true);
            n1.setEditable(true);

            fn1.setEnabled(true);
            fn1.setEditable(true);

            c1.setEnabled(true);
            c1.setEditable(true);

            n2.setEnabled(true);
            n2.setEditable(true);

            fn2.setEnabled(true);
            fn2.setEditable(true);

            c2.setEnabled(true);
            c2.setEditable(true);

            n3.setEnabled(true);
            n3.setEditable(true);

            fn3.setEnabled(true);
            fn3.setEditable(true);

            c3.setEnabled(true);
            c3.setEditable(true);

            n4.setEnabled(true);
            n4.setEditable(true);

            fn4.setEnabled(true);
            fn4.setEditable(true);

            c4.setEnabled(true);
            c4.setEditable(true);

            n5.setEnabled(true);
            n5.setEditable(true);

            fn5.setEnabled(true);
            fn5.setEditable(true);

            c5.setEnabled(true);
            c5.setEditable(true);

            n6.setEnabled(true);
            n6.setEditable(true);

            fn6.setEnabled(true);
            fn6.setEditable(true);

            c6.setEnabled(true);
            c6.setEditable(true);

            n7.setEnabled(true);
            n7.setEditable(true);

            fn7.setEnabled(true);
            fn7.setEditable(true);

            c7.setEnabled(true);
            c7.setEditable(true);

            n8.setEnabled(true);
            n8.setEditable(true);

            fn8.setEnabled(true);
            fn8.setEditable(true);

            c8.setEnabled(true);
            c8.setEditable(true);

            n9.setEnabled(true);
            n9.setEditable(true);

            fn9.setEnabled(true);
            fn9.setEditable(true);

            c9.setEnabled(true);
            c9.setEditable(true);

            n10.setEnabled(true);
            n10.setEditable(true);

            fn10.setEnabled(true);
            fn10.setEditable(true);

            c10.setEnabled(true);
            c10.setEditable(true);

            c11.setEnabled(true);
            c11.setEditable(true);
            break;
            default:
            solucion.setText("El grado de la ecuaci√≥n es mayor a 10.\nPor favor, ingrese un grado menor a 10.");
            break;
        }
    }//GEN-LAST:event_habilitarCamposActionPerformed

    private void calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularActionPerformed
        boolean imag;
        double[] aux;
        String solu="";
        switch(Integer.parseInt(grado.getText())){
            case 2:
                String[] sol1 = r.Grado2(Double.parseDouble(c1.getText()), Double.parseDouble(c2.getText()), Double.parseDouble(c3.getText()));
                aux = new double[sol1.length];
                imag = false;
                
                //pasar raices a dobule
                for(int i=0;i<sol1.length;i++){
                    try{
                        aux[i]=Double.parseDouble(sol1[i]);
                    }catch(Exception e){
                        imag = true;
                        break;
                    }
                }
                
                if(imag){
                    solu+="Presenta raices imaginarias: \n";
                    for(int i=0;i<sol1.length;i++){
                        solu+="Ra√≠z "+(i+1)+": "+sol1[i]+"\n";
                    }
                    solucion.setText(solu);
                }else{
                    r.ordernarRaices(aux);
                    
                    ArrayList<Double> fn = new ArrayList<>();
                    fn.add(Double.parseDouble(fn1.getText()));
                    fn.add(Double.parseDouble(fn2.getText()));
                    
                    ArrayList<Double> n = new ArrayList<>(); 
                    n.add(Double.parseDouble(n1.getText()));
                    n.add(Double.parseDouble(n2.getText()));
                    
                    solucionGeneral(aux,fn,n);
                }
                
                break;
            case 3:
                double[] coeficiente = {Double.parseDouble(c1.getText()),Double.parseDouble(c2.getText()),Double.parseDouble(c3.getText()),Double.parseDouble(c4.getText())};
                ArrayList<String> sol2 = r.GradoMayorA2(coeficiente);
                aux = new double[sol2.size()];
                imag = false;
                
                //pasar raices a dobule
                for(int i=0;i<sol2.size();i++){
                    try{
                        aux[i]=Double.parseDouble(sol2.get(i));
                    }catch(Exception e){
                        imag = true;
                        break;
                    }
                }
                
                if(imag){
                    solu+="Presenta raices imaginarias: \n";
                    for(int i=0;i<sol2.size();i++){
                        solu+="Ra√≠z "+(i+1)+": "+sol2.get(i)+"\n";
                    }
                    solucion.setText(solu);
                }else{
                    r.ordernarRaices(aux);
                    
                    ArrayList<Double> fn = new ArrayList<>();
                    fn.add(Double.parseDouble(fn1.getText()));
                    fn.add(Double.parseDouble(fn2.getText()));
                    fn.add(Double.parseDouble(fn3.getText()));
                    
                    ArrayList<Double> n = new ArrayList<>(); 
                    n.add(Double.parseDouble(n1.getText()));
                    n.add(Double.parseDouble(n2.getText()));
                    n.add(Double.parseDouble(n3.getText()));
                    
                    solucionGeneral(aux,fn,n);
                }
                
                break;
            case 4:
                double[] coeficiente1 = {Double.parseDouble(c1.getText()),Double.parseDouble(c2.getText()),Double.parseDouble(c3.getText()),Double.parseDouble(c4.getText()),Double.parseDouble(c5.getText())};
                ArrayList<String> sol3 = r.GradoMayorA2(coeficiente1);
                aux = new double[sol3.size()];
                imag = false;
                
                //pasar raices a dobule
                for(int i=0;i<sol3.size();i++){
                    try{
                        aux[i]=Double.parseDouble(sol3.get(i));
                    }catch(Exception e){
                        imag = true;
                        break;
                    }
                }
                
                if(imag){
                    solu+="Presenta raices imaginarias: \n";
                    for(int i=0;i<sol3.size();i++){
                        solu+="Ra√≠z "+(i+1)+": "+sol3.get(i)+"\n";
                    }
                    solucion.setText(solu);
                }else{
                    r.ordernarRaices(aux);
                    
                    ArrayList<Double> fn = new ArrayList<>();
                    fn.add(Double.parseDouble(fn1.getText()));
                    fn.add(Double.parseDouble(fn2.getText()));
                    fn.add(Double.parseDouble(fn3.getText()));
                    fn.add(Double.parseDouble(fn4.getText()));
                    
                    ArrayList<Double> n = new ArrayList<>(); 
                    n.add(Double.parseDouble(n1.getText()));
                    n.add(Double.parseDouble(n2.getText()));
                    n.add(Double.parseDouble(n3.getText()));
                    n.add(Double.parseDouble(n4.getText()));
                    
                    solucionGeneral(aux,fn,n);
                }
                break;  
            case 5:
                double[] coeficiente2 = {Double.parseDouble(c1.getText()),Double.parseDouble(c2.getText()),Double.parseDouble(c3.getText()),Double.parseDouble(c4.getText()),Double.parseDouble(c5.getText()),Double.parseDouble(c6.getText())};
                ArrayList<String> sol4 = r.GradoMayorA2(coeficiente2);
                aux = new double[sol4.size()];
                imag = false;
                
                //pasar raices a dobule
                for(int i=0;i<sol4.size();i++){
                    try{
                        aux[i]=Double.parseDouble(sol4.get(i));
                    }catch(Exception e){
                        imag = true;
                        break;
                    }
                }
                
                if(imag){
                    solu+="Presenta raices imaginarias: \n";
                    for(int i=0;i<sol4.size();i++){
                        solu+="Ra√≠z "+(i+1)+": "+sol4.get(i)+"\n";
                    }
                    solucion.setText(solu);
                }else{
                    r.ordernarRaices(aux);
                    
                    ArrayList<Double> fn = new ArrayList<>();
                    fn.add(Double.parseDouble(fn1.getText()));
                    fn.add(Double.parseDouble(fn2.getText()));
                    fn.add(Double.parseDouble(fn3.getText()));
                    fn.add(Double.parseDouble(fn4.getText()));
                    fn.add(Double.parseDouble(fn5.getText()));
                    
                    ArrayList<Double> n = new ArrayList<>(); 
                    n.add(Double.parseDouble(n1.getText()));
                    n.add(Double.parseDouble(n2.getText()));
                    n.add(Double.parseDouble(n3.getText()));
                    n.add(Double.parseDouble(n4.getText()));
                    n.add(Double.parseDouble(n5.getText()));
                    
                    solucionGeneral(aux,fn,n);
                }
                break;
            case 6:
                double[] coeficiente3 = {Double.parseDouble(c1.getText()),Double.parseDouble(c2.getText()),Double.parseDouble(c3.getText()),Double.parseDouble(c4.getText()),Double.parseDouble(c5.getText()),Double.parseDouble(c6.getText()),Double.parseDouble(c7.getText())};
                ArrayList<String> sol5 = r.GradoMayorA2(coeficiente3);
                aux = new double[sol5.size()];
                imag = false;
                
                //pasar raices a dobule
                for(int i=0;i<sol5.size();i++){
                    try{
                        aux[i]=Double.parseDouble(sol5.get(i));
                    }catch(Exception e){
                        imag = true;
                        break;
                    }
                }
                
                if(imag){
                    solu+="Presenta raices imaginarias: \n";
                    for(int i=0;i<sol5.size();i++){
                        solu+="Ra√≠z "+(i+1)+": "+sol5.get(i)+"\n";
                    }
                    solucion.setText(solu);
                }else{
                    r.ordernarRaices(aux);
                    
                    ArrayList<Double> fn = new ArrayList<>();
                    fn.add(Double.parseDouble(fn1.getText()));
                    fn.add(Double.parseDouble(fn2.getText()));
                    fn.add(Double.parseDouble(fn3.getText()));
                    fn.add(Double.parseDouble(fn4.getText()));
                    fn.add(Double.parseDouble(fn5.getText()));
                    fn.add(Double.parseDouble(fn6.getText()));
                    
                    ArrayList<Double> n = new ArrayList<>(); 
                    n.add(Double.parseDouble(n1.getText()));
                    n.add(Double.parseDouble(n2.getText()));
                    n.add(Double.parseDouble(n3.getText()));
                    n.add(Double.parseDouble(n4.getText()));
                    n.add(Double.parseDouble(n5.getText()));
                    n.add(Double.parseDouble(n6.getText()));
                    
                    solucionGeneral(aux,fn,n);
                }
                break;
            case 7:
                double[] coeficiente4 = {Double.parseDouble(c1.getText()),Double.parseDouble(c2.getText()),Double.parseDouble(c3.getText()),Double.parseDouble(c4.getText()),Double.parseDouble(c5.getText()),Double.parseDouble(c6.getText()),Double.parseDouble(c7.getText()),Double.parseDouble(c8.getText())};
                ArrayList<String> sol6 = r.GradoMayorA2(coeficiente4);
                aux = new double[sol6.size()];
                imag = false;
                
                //pasar raices a dobule
                for(int i=0;i<sol6.size();i++){
                    try{
                        aux[i]=Double.parseDouble(sol6.get(i));
                    }catch(Exception e){
                        imag = true;
                        break;
                    }
                }
                
                if(imag){
                    solu+="Presenta raices imaginarias: \n";
                    for(int i=0;i<sol6.size();i++){
                        solu+="Ra√≠z "+(i+1)+": "+sol6.get(i)+"\n";
                    }
                    solucion.setText(solu);
                }else{
                    r.ordernarRaices(aux);
                    
                    ArrayList<Double> fn = new ArrayList<>();
                    fn.add(Double.parseDouble(fn1.getText()));
                    fn.add(Double.parseDouble(fn2.getText()));
                    fn.add(Double.parseDouble(fn3.getText()));
                    fn.add(Double.parseDouble(fn4.getText()));
                    fn.add(Double.parseDouble(fn5.getText()));
                    fn.add(Double.parseDouble(fn6.getText()));
                    fn.add(Double.parseDouble(fn7.getText()));
                    
                    ArrayList<Double> n = new ArrayList<>(); 
                    n.add(Double.parseDouble(n1.getText()));
                    n.add(Double.parseDouble(n2.getText()));
                    n.add(Double.parseDouble(n3.getText()));
                    n.add(Double.parseDouble(n4.getText()));
                    n.add(Double.parseDouble(n5.getText()));
                    n.add(Double.parseDouble(n6.getText()));
                    n.add(Double.parseDouble(n7.getText()));
                    
                    solucionGeneral(aux,fn,n);
                }
                break;
            case 8:
                double[] coeficiente5 = {Double.parseDouble(c1.getText()),Double.parseDouble(c2.getText()),Double.parseDouble(c3.getText()),Double.parseDouble(c4.getText()),Double.parseDouble(c5.getText()),Double.parseDouble(c6.getText()),Double.parseDouble(c7.getText()),Double.parseDouble(c8.getText()),Double.parseDouble(c9.getText())};
                ArrayList<String> sol7 = r.GradoMayorA2(coeficiente5);
                aux = new double[sol7.size()];
                imag = false;
                
                //pasar raices a dobule
                for(int i=0;i<sol7.size();i++){
                    try{
                        aux[i]=Double.parseDouble(sol7.get(i));
                    }catch(Exception e){
                        imag = true;
                        break;
                    }
                }
                
                if(imag){
                    solu+="Presenta raices imaginarias: \n";
                    for(int i=0;i<sol7.size();i++){
                        solu+="Ra√≠z "+(i+1)+": "+sol7.get(i)+"\n";
                    }
                    solucion.setText(solu);
                }else{
                    r.ordernarRaices(aux);
                    
                    ArrayList<Double> fn = new ArrayList<>();
                    fn.add(Double.parseDouble(fn1.getText()));
                    fn.add(Double.parseDouble(fn2.getText()));
                    fn.add(Double.parseDouble(fn3.getText()));
                    fn.add(Double.parseDouble(fn4.getText()));
                    fn.add(Double.parseDouble(fn5.getText()));
                    fn.add(Double.parseDouble(fn6.getText()));
                    fn.add(Double.parseDouble(fn7.getText()));
                    fn.add(Double.parseDouble(fn8.getText()));
                    
                    ArrayList<Double> n = new ArrayList<>(); 
                    n.add(Double.parseDouble(n1.getText()));
                    n.add(Double.parseDouble(n2.getText()));
                    n.add(Double.parseDouble(n3.getText()));
                    n.add(Double.parseDouble(n4.getText()));
                    n.add(Double.parseDouble(n5.getText()));
                    n.add(Double.parseDouble(n6.getText()));
                    n.add(Double.parseDouble(n7.getText()));
                    n.add(Double.parseDouble(n8.getText()));
                    
                    solucionGeneral(aux,fn,n);
                }
                break;
            case 9:
                double[] coeficiente6 = {Double.parseDouble(c1.getText()),Double.parseDouble(c2.getText()),Double.parseDouble(c3.getText()),Double.parseDouble(c4.getText()),Double.parseDouble(c5.getText()),Double.parseDouble(c6.getText()),Double.parseDouble(c7.getText()),Double.parseDouble(c8.getText()),Double.parseDouble(c9.getText()),Double.parseDouble(c10.getText())};
                ArrayList<String> sol8 = r.GradoMayorA2(coeficiente6);
                aux = new double[sol8.size()];
                imag = false;
                
                //pasar raices a dobule
                for(int i=0;i<sol8.size();i++){
                    try{
                        aux[i]=Double.parseDouble(sol8.get(i));
                    }catch(Exception e){
                        imag = true;
                        break;
                    }
                }
                
                if(imag){
                    solu+="Presenta raices imaginarias: \n";
                    for(int i=0;i<sol8.size();i++){
                        solu+="Ra√≠z "+(i+1)+": "+sol8.get(i)+"\n";
                    }
                    solucion.setText(solu);
                }else{
                    r.ordernarRaices(aux);
                    
                    ArrayList<Double> fn = new ArrayList<>();
                    fn.add(Double.parseDouble(fn1.getText()));
                    fn.add(Double.parseDouble(fn2.getText()));
                    fn.add(Double.parseDouble(fn3.getText()));
                    fn.add(Double.parseDouble(fn4.getText()));
                    fn.add(Double.parseDouble(fn5.getText()));
                    fn.add(Double.parseDouble(fn6.getText()));
                    fn.add(Double.parseDouble(fn7.getText()));
                    fn.add(Double.parseDouble(fn8.getText()));
                    fn.add(Double.parseDouble(fn9.getText()));
                    
                    ArrayList<Double> n = new ArrayList<>(); 
                    n.add(Double.parseDouble(n1.getText()));
                    n.add(Double.parseDouble(n2.getText()));
                    n.add(Double.parseDouble(n3.getText()));
                    n.add(Double.parseDouble(n4.getText()));
                    n.add(Double.parseDouble(n5.getText()));
                    n.add(Double.parseDouble(n6.getText()));
                    n.add(Double.parseDouble(n7.getText()));
                    n.add(Double.parseDouble(n8.getText()));
                    n.add(Double.parseDouble(n9.getText()));
                    
                    solucionGeneral(aux,fn,n);
                }
                break;
            case 10:
                double[] coeficiente7 = {Double.parseDouble(c1.getText()),Double.parseDouble(c2.getText()),Double.parseDouble(c3.getText()),Double.parseDouble(c4.getText()),Double.parseDouble(c5.getText()),Double.parseDouble(c6.getText()),Double.parseDouble(c7.getText()),Double.parseDouble(c8.getText()),Double.parseDouble(c9.getText()),Double.parseDouble(c10.getText()),Double.parseDouble(c11.getText())};
                ArrayList<String> sol9 = r.GradoMayorA2(coeficiente7);
                aux = new double[sol9.size()];
                imag = false;
                
                //pasar raices a dobule
                for(int i=0;i<sol9.size();i++){
                    try{
                        aux[i]=Double.parseDouble(sol9.get(i));
                    }catch(Exception e){
                        imag = true;
                        break;
                    }
                }
                
                if(imag){
                    solu+="Presenta raices imaginarias: \n";
                    for(int i=0;i<sol9.size();i++){
                        solu+="Ra√≠z "+(i+1)+": "+sol9.get(i)+"\n";
                    }
                    solucion.setText(solu);
                }else{
                    r.ordernarRaices(aux);
                    
                    ArrayList<Double> fn = new ArrayList<>();
                    fn.add(Double.parseDouble(fn1.getText()));
                    fn.add(Double.parseDouble(fn2.getText()));
                    fn.add(Double.parseDouble(fn3.getText()));
                    fn.add(Double.parseDouble(fn4.getText()));
                    fn.add(Double.parseDouble(fn5.getText()));
                    fn.add(Double.parseDouble(fn6.getText()));
                    fn.add(Double.parseDouble(fn7.getText()));
                    fn.add(Double.parseDouble(fn8.getText()));
                    fn.add(Double.parseDouble(fn9.getText()));
                    fn.add(Double.parseDouble(fn10.getText()));
                    
                    ArrayList<Double> n = new ArrayList<>(); 
                    n.add(Double.parseDouble(n1.getText()));
                    n.add(Double.parseDouble(n2.getText()));
                    n.add(Double.parseDouble(n3.getText()));
                    n.add(Double.parseDouble(n4.getText()));
                    n.add(Double.parseDouble(n5.getText()));
                    n.add(Double.parseDouble(n6.getText()));
                    n.add(Double.parseDouble(n7.getText()));
                    n.add(Double.parseDouble(n8.getText()));
                    n.add(Double.parseDouble(n9.getText()));
                    n.add(Double.parseDouble(n10.getText()));
                    
                    solucionGeneral(aux,fn,n);
                }
                break;
            default:
                solucion.setText("Grado incorrecto");
                break;
        }
    }//GEN-LAST:event_calcularActionPerformed

    public void solucionGeneral(double[] r, ArrayList<Double> fn, ArrayList<Double> n){
        double[] c = new double[r.length];
        int[] cont = new int[r.length];
        
        //LLenar contador
        for(int i=0;i<r.length-1;i++){
            for(int j=i+1;j<r.length;j++){
                if(r[i]==r[j]){
                    cont[i]++;
                }
            }
        }
        
        //Crear y llenar Matrix
        double[][] matrix = new double[Integer.parseInt(grado.getText())][Integer.parseInt(grado.getText())+1];
        
        for(int i=0;i<matrix.length;i++){ 
            for(int j=0;j<matrix[0].length;j++){
                if(j==matrix[0].length-1){
                    matrix[i][j]=fn.get(i);
                }else{
                    //Calcular coeficientes de las consantes
                    matrix[i][j]=Math.pow(n.get(i), cont[j])*Math.pow(r[j], n.get(i));
                }
            }
        }
        
        double[] cons = g.jordan(matrix);
        String sol = "fn = ";
        
        for(int i=0;i<cons.length;i++){
            sol+="("+cons[i]+") ("+r[i]+"^n) (n^"+cont[i]+") + \n";
        }
        
        solucion.setText(sol);
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField c1;
    private javax.swing.JTextField c10;
    private javax.swing.JTextField c11;
    private javax.swing.JTextField c2;
    private javax.swing.JTextField c3;
    private javax.swing.JTextField c4;
    private javax.swing.JTextField c5;
    private javax.swing.JTextField c6;
    private javax.swing.JTextField c7;
    private javax.swing.JTextField c8;
    private javax.swing.JTextField c9;
    private javax.swing.JButton calcular;
    private javax.swing.JTextField fn1;
    private javax.swing.JTextField fn10;
    private javax.swing.JTextField fn2;
    private javax.swing.JTextField fn3;
    private javax.swing.JTextField fn4;
    private javax.swing.JTextField fn5;
    private javax.swing.JTextField fn6;
    private javax.swing.JTextField fn7;
    private javax.swing.JTextField fn8;
    private javax.swing.JTextField fn9;
    private javax.swing.JTextField grado;
    private javax.swing.JButton habilitarCampos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField n1;
    private javax.swing.JTextField n10;
    private javax.swing.JTextField n2;
    private javax.swing.JTextField n3;
    private javax.swing.JTextField n4;
    private javax.swing.JTextField n5;
    private javax.swing.JTextField n6;
    private javax.swing.JTextField n7;
    private javax.swing.JTextField n8;
    private javax.swing.JTextField n9;
    private javax.swing.JTextArea solucion;
    // End of variables declaration//GEN-END:variables
}
